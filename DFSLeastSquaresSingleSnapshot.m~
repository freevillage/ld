function AfphiOptimal = DFSLeastSquaresSingleSnapshot( signal )

signalReIm = ReIm( ToRow( signal ) );
totalAntennas = length( signal );

n = 0 : (totalAntennas-1);

fun = @(x,n) x(1) * [ ToRow( cos( x(2)*pi*n + x(3) ) ), ToRow( sin( x(2)*pi*n + x(3) ) ) ];

% Initial approximation
freqApproximate = DiscreteFrequencySpectrum( signal, 'Method', 'CorrelationSinglePhase' ); 
freqApproximate = rand;
amplitudeApproximate = mean( abs( ToColumn( signal ) ) );
phaseApproximate = 2*pi * rand;

x0 = [ amplitudeApproximate; freqApproximate; phaseApproximate ];

lb = [0, -1, 0];
ub = [10*amplitudeApproximate, 1, 2];

options = optimoptions( 'lsqcurvefit', ...
    'MaxFunEvals', 1e6, ...
    'MaxIter', 1e6, ...
    'TolX', 1e-15, ...
    'TolFun', 1e-15, ...
    'Display', 'off' );

leastSquaresProblem = createOptimProblem( 'lsqcurvefit', ...
    'x0', x0, ...
    'objective', fun, ...
    'lb', lb, ...
    'ub', ub, ...
    'xdata', n, ...
    'ydata', signalReIm, ...
    'options', options );


AfphiOptimal = lsqcurvefit( fun, x0, n, signalReIm, lb, ub, options );

end

function xy = ReIm( z )

assert( isvector ( z ) );
zColumn = ToColumn( z );
xyColumn = [ real( zColumn ) ; imag( zColumn ) ];

if iscolumn( z )
    xy = xyColumn;
else
    xy = transpose( xyColumn );
end

end